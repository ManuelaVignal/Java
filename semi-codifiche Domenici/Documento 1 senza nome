Esercizio 1.1

Esprimete con le strutture di controllo fondamentali un algoritmo per il calcolo della somma di
tutti i numeri interi compresi tra x e y, estremi inclusi, dove x e y sono due interi forniti dall’utente.
Se ad esempio l’utente fornisce 3 e 8 il risultato dovr`a essere 33. Nella prima versione supponete
che l’utente fornisca i numeri in ordine non decrescente. Nella seconda versione l’algoritmo deve
calcolare la somma indipendentemente dall’ordine: se l’utente fornisce prima 8 e poi 3 il risultato
deve essere di nuovo 33.
 
start

     leggi x
     leggi y

     numero = x;
     risultao = 0;
           
      if (x > y) then

          z = x;
          x = y;
          y = z;

 end if

   while (numero <= y) do

        risultato= risultato +numero;
        numero =numero +1;
  end while

stampo risultato;

end


Esercizio 1.2

Esprimete con le strutture di controllo fondamentali un algoritmo per il calcolo del prodotto di
due numeri interi, utilizzando esclusivamente operazioni di somma.

start

   leggo x;
   leggo y;

    somma = 0;


 while (y <> 0) do

   somma = x + somma ;
   y = y - 1; 

 end while

stampo somma

end

Esercizio 1.3

Esprimete con le strutture di controllo fondamentali un algoritmo per il calcolo del quoziente e
del resto della divisione tra due numeri interi, utilizzando esclusivamente operazioni di somma e
sottrazione. Ad esempio, se in ingresso vengono forniti i valori 13 e 4, in uscita dovranno essere
restituiti i valori 3 e 1. Si supponga che i numeri inseriti siano positivi.


start

  	x = leggi dividendo;
	y = leggi divisore;
        calcola = x;
        

	quoziente = 0; // numero di cicli
 	resto = 0;     //sottrazione

  if (y != 0)then

	 while (y <= calcola) do

       

        quoziente= quoziente + 1;
        calcola = calcola - y;



	 end while

   	resto = calcola;

   	stampo resto;
   	stampo quoziente;
  else

      stampa  impossibile calcolare la divisione x 0      

  end if

end


Esercizio 1.4

Esprimete con le strutture di controllo fondamentali un algoritmo per il calcolo della potenza x^y di
due numeri interi x e y, utilizzando esclusivamente le 4 operazioni di somma, sottrazione, prodotto
e divisione. Si supponga y ≥ 0.


Start


    x = leggi numero input, base;
    y = leggi numero input, esponente; 
    risultato = 1;

    
    


  if (x non intero || y non intero) then
             stampa lameno un numero non è interno, impossibile proseguire
             end 

  end if
   

  if (y < 0) then
            stampa esponente negativo, impossibile proseguire
           end 
  end if
  
        conta =1;
  	while (conta <= y)) do // l'esponente y determina il numero dei cicli da fare


      		risultato = x * risultato;
      	      	conta = conta + 1;        
              


 	end while

  	
  	stampo risultato;


end

Esercizio 1.5

Ripetete l’esercizio 1.4, senza utilizzare prodotto e divisione.
Suggerimento: combinate in maniera opportuna gli algoritmi ottenuti per risolvere gli esercizi 1.2
e 1.4.


Start


    x = leggi numero input, base;
    y = leggi numero input, esponente; 
    risultato = 1;

    

  if (x non intero || y non intero) then
             stampa lameno un numero non è interno, impossibile proseguire
             end 

  end if
   

  if (y < 0) then
            stampa esponente negativo, impossibile proseguire
           end 
  end if
  
        conta =1;
  	while (conta <= y)) do // l'esponente y determina il numero dei cicli da fare

                conta1 = 1;
                ris = 0;
                while (conta1 <= y) do
			
			ris = ris + risultato;
			conta1 = conta1 + 1;
		
		end while
                 risultato = ris;
                 conta = conta + 1;


      		      
              

        end while

      stampo risultato;


end

Esercizio 1.6 con numeri


Start

   x = leggi numero;
   somma = 0;

    while (x!=0) do

      
      somma = somma +x;
      x = leggi numero;
  
  end while 

  stampa somma;


Esercizio 1.6 con array


Start

   x = leggi numero;
   somma = 0;
   int i =0;
   numeri = int [10];

    while (x!=0 && indice <10) do

      
      numeri[indice] = x;
      indice = indice +1;
      x = leggi numero;
     
  end while 
  
  indice = 0;

  while (indice <10) do
    somma = somma + numeri[indice];
    indice = indice +1;

end while

  stampa somma;

end


Esercizio 1.7


Start

     x = leggi numero;
     sommap=0;
     sommad = 0;
     resto = 0;
     np = 0;
     nd = 0;
     mediap = 0;
     mediad = 0;

    while (x!=0) do

     
         if (x è pari) then

              sommap = sommap +x;
              np =np+1;
              mediap = sommap /np;


     	 else
      
             sommap = sommap +x;
             nd = nd + 1;
             mediad = sommad /nd;

         end if
      
          x=leggi numero;

    end while
 
        stampa mediap e mediad
      
        if (mediap > mediad) then 
               
	    stampa media pari maggiore;

         else if (mediad > mediap) then
               
            stampa media dispari maggiore;
       
         else

           stampa medie uguali;

  
       end if

 end

Esercizio 1.8--numeri perfetti, difettici, abbondanti

start

   x = leggi numero;
   n =1;
   sommaDivisori= 0;
  
  while (n<x) do
    
     if (x%n == 0) then
     
       sommaDivisori = sommaDivisori + n;
               
 
        end if

          n = n+1;

     end while

   if (sommaDivisori == x)then
        
          stampa numero perfetto
  
   else if (sommadivisori >x) then
         
          stampa abbondante;

    else 

          stampa difettivo;


end


Esercizio 1.9 ingresso di 10, tra 1 e 10....dire i numeri perfetti, abbondanti e difettivi nel range di 10.

start

   limite = leggi numero;
   x = 1;

  while (x<=limite) do

      n=1;
      SommaDivisdori =0;


   while (n<x) do
    
      if (x%n == 0) then
     
       sommaDivisori = sommaDivisori + n;
               
 
        end if

          n = n+1;

     end while

      if (sommaDivisori == x)then
        
          stampa numero perfetto
  
      else if (sommadivisori >x) then
         
          stampa abbondante;

    else 

          stampa difettivo;

    end if

    x= x+1;


end


DICHIARAZIONE ARRAY - L'INDICE PARTE SEMPRE DA 0 FINO AD N DICHIARATO
GLI ARRAY HANNO UNA PROPRIETÀ CHE SI CHIAMA "lenght" --> LUNGHEZZA ARRAY
"ALGORITMI FONDAMENTALI"

start


        numeri = {2,5,4,9,20,29}; numeri contiente questa serie di array
	indice = 0;

        while (indice < numeri.lenght) do
            
             stampa  numeri [indice];
	     indice = indice + 1;

	end while



end































